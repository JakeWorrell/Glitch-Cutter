<?php
/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */

class WordListAPI {

	function __construct($apiClient) {
	  $this->apiClient = $apiClient;
	}


	/**
	 * Updates an existing WordList
	 *
	 * 
	 * 
   * @param wordListId  ID of WordList to update
   *  @param postData  Updated WordList
   *  @param auth_token  The auth token of the logged-in user, obtained by calling /account.{format}/authenticate/{username} (described above)
   *  
	 * @throws APIException 400 - Invalid ID supplied 403 - Not Authorized to update WordList 404 - WordList not found 
	 */

	 public function updateWordList($wordListId, $postData, $auth_token) {

		//parse inputs
		$resourcePath = "/wordList.{format}/{wordListId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($wordListId != null) {
			$resourcePath = str_replace("{wordListId}", $wordListId, $resourcePath);
		}

		if($auth_token != null) {
		 	$headerParams['auth_token'] = $this->apiClient->toPathValue($auth_token);
		}
	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
		
	 }


	/**
	 * Deletes an existing WordList
	 *
	 * 
	 * 
   * @param wordListId  ID of WordList to delete
   *  @param auth_token  The auth token of the logged-in user, obtained by calling /account.{format}/authenticate/{username} (described above)
   *  
	 * @throws APIException 400 - Invalid ID supplied 403 - Not Authorized to delete WordList 404 - WordList not found 
	 */

	 public function deleteWordList($wordListId, $auth_token) {

		//parse inputs
		$resourcePath = "/wordList.{format}/{wordListId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$method = "DELETE";
        $queryParams = array();
        $headerParams = array();
    
		
		if($wordListId != null) {
			$resourcePath = str_replace("{wordListId}", $wordListId, $resourcePath);
		}

		if($auth_token != null) {
		 	$headerParams['auth_token'] = $this->apiClient->toPathValue($auth_token);
		}
	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
		
	 }


	/**
	 * Fetches a WordList by ID
	 *
	 * 
	 * 
   * @param wordListId  ID of WordList to fetch
   *  @param auth_token  The auth token of the logged-in user, obtained by calling /account.{format}/authenticate/{username} (described above)
   *  
	 * @return WordList {@link WordList} 
	 * @throws APIException 400 - Invalid ID supplied 403 - Not Authorized to access WordList 404 - WordList not found 
	 */

	 public function getWordListById($wordListId, $auth_token) {

		//parse inputs
		$resourcePath = "/wordList.{format}/{wordListId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($wordListId != null) {
			$resourcePath = str_replace("{wordListId}", $wordListId, $resourcePath);
		}

		if($auth_token != null) {
		 	$headerParams['auth_token'] = $this->apiClient->toPathValue($auth_token);
		}
	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'WordList');
		return $responseObject;
				
				
	 }


	/**
	 * Adds words to a WordList
	 *
	 * 
	 * 
   * @param wordListId  ID of WordList to user
   *  @param postData  Array of words to add to WordList
   *  @param auth_token  The auth token of the logged-in user, obtained by calling /account.{format}/authenticate/{username} (described above)
   *  
	 * @throws APIException 400 - Invalid ID supplied 403 - Not Authorized to access WordList 404 - WordList not found 
	 */

	 public function addWordsToWordList($wordListId, $postData, $auth_token) {

		//parse inputs
		$resourcePath = "/wordList.{format}/{wordListId}/words";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
		
		if($wordListId != null) {
			$resourcePath = str_replace("{wordListId}", $wordListId, $resourcePath);
		}

		if($auth_token != null) {
		 	$headerParams['auth_token'] = $this->apiClient->toPathValue($auth_token);
		}
	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
		
	 }


	/**
	 * Fetches words in a WordList
	 *
	 * 
	 * 
   * @param wordListWordsInput  
   *  
	 * @return Array<WordListWord> {@link WordListWord} 
	 * @throws APIException 400 - Invalid ID supplied 403 - Not Authorized to access WordList 404 - WordList not found 
	 */

	 public function getWordListWords($wordListWordsInput) {

		//parse inputs
		$resourcePath = "/wordList.{format}/{wordListId}/words";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
	
		
		if($wordListWordsInput != null && $wordListWordsInput->sortBy != null) {
		 	$queryParams["sortBy"] = $this->apiClient->toPathValue($wordListWordsInput->sortBy);
		}
		if($wordListWordsInput != null && $wordListWordsInput->sortOrder != null) {
		 	$queryParams["sortOrder"] = $this->apiClient->toPathValue($wordListWordsInput->sortOrder);
		}
		if($wordListWordsInput != null && $wordListWordsInput->skip != null) {
		 	$queryParams["skip"] = $this->apiClient->toPathValue($wordListWordsInput->skip);
		}
		if($wordListWordsInput != null && $wordListWordsInput->limit != null) {
		 	$queryParams["limit"] = $this->apiClient->toPathValue($wordListWordsInput->limit);
		}

		if($wordListWordsInput != null && $wordListWordsInput->wordListId != null) {
		 	$resourcePath = str_replace("{wordListId}", $wordListWordsInput->wordListId, $resourcePath);	
		}

		if($wordListWordsInput != null && $wordListWordsInput->auth_token != null) {
		 	$headerParams['auth_token'] = $this->apiClient->toPathValue($wordListWordsInput->auth_token);
		}
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		
        $responseObjects = array();
        foreach ($response as $object) {
          $responseObjects[] = $this->apiClient->deserialize($object, 'WordListWord');
        }
        return $responseObjects;				
	 }


	/**
	 * Removes words from a WordList
	 *
	 * 
	 * 
   * @param wordListId  ID of WordList to use
   *  @param postData  Words to remove from WordList
   *  @param auth_token  The auth token of the logged-in user, obtained by calling /account.{format}/authenticate/{username} (described above)
   *  
	 * @throws APIException 400 - Invalid ID supplied 403 - Not Authorized to modify WordList 404 - WordList not found 
	 */

	 public function deleteWordsFromWordList($wordListId, $postData, $auth_token) {

		//parse inputs
		$resourcePath = "/wordList.{format}/{wordListId}/deleteWords";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
		
		if($wordListId != null) {
			$resourcePath = str_replace("{wordListId}", $wordListId, $resourcePath);
		}

		if($auth_token != null) {
		 	$headerParams['auth_token'] = $this->apiClient->toPathValue($auth_token);
		}
	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
		
	 }



}