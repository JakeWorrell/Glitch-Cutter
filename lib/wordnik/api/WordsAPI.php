<?php
/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */

class WordsAPI {

	function __construct($apiClient) {
	  $this->apiClient = $apiClient;
	}


	/**
	 * Searches words.
	 *
	 * 
	 * 
   * @param wordsSearchInput  
   *  
	 * @return Array<WordFrequency> {@link WordFrequency} 
	 * @throws APIException 400 - Invalid term supplied. 404 - No results. 
	 */

	 public function searchWords($wordsSearchInput) {

		//parse inputs
		$resourcePath = "/words.{format}/search";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
	
		
		if($wordsSearchInput != null && $wordsSearchInput->query != null) {
		 	$queryParams["query"] = $this->apiClient->toPathValue($wordsSearchInput->query);
		}
		if($wordsSearchInput != null && $wordsSearchInput->caseSensitive != null) {
		 	$queryParams["caseSensitive"] = $this->apiClient->toPathValue($wordsSearchInput->caseSensitive);
		}
		if($wordsSearchInput != null && $wordsSearchInput->includePartOfSpeech != null) {
		 	$queryParams["includePartOfSpeech"] = $this->apiClient->toPathValue($wordsSearchInput->includePartOfSpeech);
		}
		if($wordsSearchInput != null && $wordsSearchInput->excludePartOfSpeech != null) {
		 	$queryParams["excludePartOfSpeech"] = $this->apiClient->toPathValue($wordsSearchInput->excludePartOfSpeech);
		}
		if($wordsSearchInput != null && $wordsSearchInput->minCorpusCount != null) {
		 	$queryParams["minCorpusCount"] = $this->apiClient->toPathValue($wordsSearchInput->minCorpusCount);
		}
		if($wordsSearchInput != null && $wordsSearchInput->maxCorpusCount != null) {
		 	$queryParams["maxCorpusCount"] = $this->apiClient->toPathValue($wordsSearchInput->maxCorpusCount);
		}
		if($wordsSearchInput != null && $wordsSearchInput->minDictionaryCount != null) {
		 	$queryParams["minDictionaryCount"] = $this->apiClient->toPathValue($wordsSearchInput->minDictionaryCount);
		}
		if($wordsSearchInput != null && $wordsSearchInput->maxDictionaryCount != null) {
		 	$queryParams["maxDictionaryCount"] = $this->apiClient->toPathValue($wordsSearchInput->maxDictionaryCount);
		}
		if($wordsSearchInput != null && $wordsSearchInput->minLength != null) {
		 	$queryParams["minLength"] = $this->apiClient->toPathValue($wordsSearchInput->minLength);
		}
		if($wordsSearchInput != null && $wordsSearchInput->maxLength != null) {
		 	$queryParams["maxLength"] = $this->apiClient->toPathValue($wordsSearchInput->maxLength);
		}
		if($wordsSearchInput != null && $wordsSearchInput->skip != null) {
		 	$queryParams["skip"] = $this->apiClient->toPathValue($wordsSearchInput->skip);
		}
		if($wordsSearchInput != null && $wordsSearchInput->limit != null) {
		 	$queryParams["limit"] = $this->apiClient->toPathValue($wordsSearchInput->limit);
		}

	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		
        $responseObjects = array();
        foreach ($response as $object) {
          $responseObjects[] = $this->apiClient->deserialize($object, 'WordFrequency');
        }
        return $responseObjects;				
	 }


	/**
	 * Returns a specific WordOfTheDay
	 *
	 * 
	 * 
   * @param date  Fetches by date in yyyy-MM-dd
   *  @param category  Filters response by category
   *  @param creator  Filters response by username
   *  
	 * @return WordOfTheDay {@link WordOfTheDay} 
	 * @throws APIException 
	 */

	 public function getWordOfTheDay($date, $category, $creator) {

		//parse inputs
		$resourcePath = "/words.{format}/wordOfTheDay";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
    if($date != null) {
		$queryParams['date'] = $this->apiClient->toPathValue($date);
	}
    if($category != null) {
		$queryParams['category'] = $this->apiClient->toPathValue($category);
	}
    if($creator != null) {
		$queryParams['creator'] = $this->apiClient->toPathValue($creator);
	}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'WordOfTheDay');
		return $responseObject;
				
				
	 }


	/**
	 * Searches words.
	 *
	 * 
	 * 
   * @param query  Search query
   *  @param caseSensitive  Search case sensitive
   * 	 *      Allowed values are - true,false  @param includePartOfSpeech  Only include these comma-delimited parts of speech
   * 	 *      Allowed values are - noun,adjective,verb,adverb,interjection,pronoun,preposition,abbreviation,affix,article,auxiliary-verb,conjunction,definite-article,family-name,given-name,idiom,imperative,noun-plural,noun-posessive,past-participle,phrasal-prefix,proper-noun,proper-noun-plural,proper-noun-posessive,suffix,verb-intransitive,verb-transitive  @param excludePartOfSpeech  Exclude these comma-delimited parts of speech
   *  @param minCorpusCount  Minimum corpus frequency for terms
   * 	 *      Allowed values are - range[0.0,Infinity]  @param maxCorpusCount  Maximum corpus frequency for terms
   * 	 *      Allowed values are - range[0.0,Infinity]  @param minDictionaryCount  Minimum number of dictionary entries
   * 	 *      Allowed values are - range[0.0,Infinity]  @param maxDictionaryCount  Maximum dictionary count
   * 	 *      Allowed values are - range[0.0,Infinity]  @param minLength  Minimum word length
   * 	 *      Allowed values are - range[0.0,1024.0]  @param maxLength  Maximum word length
   * 	 *      Allowed values are - range[0.0,1024.0]  @param skip  Results to skip
   * 	 *      Allowed values are - range[0.0,1000.0]  @param limit  Maximum number of results to return
   * 	 *      Allowed values are - range[1.0,1000.0]  
	 * @return WordSearchResults {@link WordSearchResults} 
	 * @throws APIException 400 - Invalid query supplied. 
	 */

	 public function searchWordsNew($query, $caseSensitive, $includePartOfSpeech, $excludePartOfSpeech, $minCorpusCount, $maxCorpusCount, $minDictionaryCount, $maxDictionaryCount, $minLength, $maxLength, $skip, $limit) {

		//parse inputs
		$resourcePath = "/words.{format}/search/{query}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
    if($caseSensitive != null) {
		$queryParams['caseSensitive'] = $this->apiClient->toPathValue($caseSensitive);
	}
    if($includePartOfSpeech != null) {
		$queryParams['includePartOfSpeech'] = $this->apiClient->toPathValue($includePartOfSpeech);
	}
    if($excludePartOfSpeech != null) {
		$queryParams['excludePartOfSpeech'] = $this->apiClient->toPathValue($excludePartOfSpeech);
	}
    if($minCorpusCount != null) {
		$queryParams['minCorpusCount'] = $this->apiClient->toPathValue($minCorpusCount);
	}
    if($maxCorpusCount != null) {
		$queryParams['maxCorpusCount'] = $this->apiClient->toPathValue($maxCorpusCount);
	}
    if($minDictionaryCount != null) {
		$queryParams['minDictionaryCount'] = $this->apiClient->toPathValue($minDictionaryCount);
	}
    if($maxDictionaryCount != null) {
		$queryParams['maxDictionaryCount'] = $this->apiClient->toPathValue($maxDictionaryCount);
	}
    if($minLength != null) {
		$queryParams['minLength'] = $this->apiClient->toPathValue($minLength);
	}
    if($maxLength != null) {
		$queryParams['maxLength'] = $this->apiClient->toPathValue($maxLength);
	}
    if($skip != null) {
		$queryParams['skip'] = $this->apiClient->toPathValue($skip);
	}
    if($limit != null) {
		$queryParams['limit'] = $this->apiClient->toPathValue($limit);
	}

		if($query != null) {
			$resourcePath = str_replace("{query}", $query, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'WordSearchResults');
		return $responseObject;
				
				
	 }


	/**
	 * Returns an array of random WordObjects
	 *
	 * 
	 * 
   * @param wordsRandomWordsInput  
   *  
	 * @return Array<WordObject> {@link WordObject} 
	 * @throws APIException 400 - Invalid term supplied. 404 - No results. 
	 */

	 public function getRandomWords($wordsRandomWordsInput) {

		//parse inputs
		$resourcePath = "/words.{format}/randomWords";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
	
		
		if($wordsRandomWordsInput != null && $wordsRandomWordsInput->hasDictionaryDef != null) {
		 	$queryParams["hasDictionaryDef"] = $this->apiClient->toPathValue($wordsRandomWordsInput->hasDictionaryDef);
		}
		if($wordsRandomWordsInput != null && $wordsRandomWordsInput->includePartOfSpeech != null) {
		 	$queryParams["includePartOfSpeech"] = $this->apiClient->toPathValue($wordsRandomWordsInput->includePartOfSpeech);
		}
		if($wordsRandomWordsInput != null && $wordsRandomWordsInput->excludePartOfSpeech != null) {
		 	$queryParams["excludePartOfSpeech"] = $this->apiClient->toPathValue($wordsRandomWordsInput->excludePartOfSpeech);
		}
		if($wordsRandomWordsInput != null && $wordsRandomWordsInput->minCorpusCount != null) {
		 	$queryParams["minCorpusCount"] = $this->apiClient->toPathValue($wordsRandomWordsInput->minCorpusCount);
		}
		if($wordsRandomWordsInput != null && $wordsRandomWordsInput->maxCorpusCount != null) {
		 	$queryParams["maxCorpusCount"] = $this->apiClient->toPathValue($wordsRandomWordsInput->maxCorpusCount);
		}
		if($wordsRandomWordsInput != null && $wordsRandomWordsInput->minDictionaryCount != null) {
		 	$queryParams["minDictionaryCount"] = $this->apiClient->toPathValue($wordsRandomWordsInput->minDictionaryCount);
		}
		if($wordsRandomWordsInput != null && $wordsRandomWordsInput->maxDictionaryCount != null) {
		 	$queryParams["maxDictionaryCount"] = $this->apiClient->toPathValue($wordsRandomWordsInput->maxDictionaryCount);
		}
		if($wordsRandomWordsInput != null && $wordsRandomWordsInput->minLength != null) {
		 	$queryParams["minLength"] = $this->apiClient->toPathValue($wordsRandomWordsInput->minLength);
		}
		if($wordsRandomWordsInput != null && $wordsRandomWordsInput->maxLength != null) {
		 	$queryParams["maxLength"] = $this->apiClient->toPathValue($wordsRandomWordsInput->maxLength);
		}
		if($wordsRandomWordsInput != null && $wordsRandomWordsInput->sortBy != null) {
		 	$queryParams["sortBy"] = $this->apiClient->toPathValue($wordsRandomWordsInput->sortBy);
		}
		if($wordsRandomWordsInput != null && $wordsRandomWordsInput->sortOrder != null) {
		 	$queryParams["sortOrder"] = $this->apiClient->toPathValue($wordsRandomWordsInput->sortOrder);
		}
		if($wordsRandomWordsInput != null && $wordsRandomWordsInput->limit != null) {
		 	$queryParams["limit"] = $this->apiClient->toPathValue($wordsRandomWordsInput->limit);
		}

	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		
        $responseObjects = array();
        foreach ($response as $object) {
          $responseObjects[] = $this->apiClient->deserialize($object, 'WordObject');
        }
        return $responseObjects;				
	 }


	/**
	 * Returns a single random WordObject
	 *
	 * 
	 * 
   * @param wordsRandomWordInput  
   *  
	 * @return WordObject {@link WordObject} 
	 * @throws APIException 404 - No word found. 
	 */

	 public function getRandomWord($wordsRandomWordInput) {

		//parse inputs
		$resourcePath = "/words.{format}/randomWord";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
	
		
		if($wordsRandomWordInput != null && $wordsRandomWordInput->hasDictionaryDef != null) {
		 	$queryParams["hasDictionaryDef"] = $this->apiClient->toPathValue($wordsRandomWordInput->hasDictionaryDef);
		}
		if($wordsRandomWordInput != null && $wordsRandomWordInput->includePartOfSpeech != null) {
		 	$queryParams["includePartOfSpeech"] = $this->apiClient->toPathValue($wordsRandomWordInput->includePartOfSpeech);
		}
		if($wordsRandomWordInput != null && $wordsRandomWordInput->excludePartOfSpeech != null) {
		 	$queryParams["excludePartOfSpeech"] = $this->apiClient->toPathValue($wordsRandomWordInput->excludePartOfSpeech);
		}
		if($wordsRandomWordInput != null && $wordsRandomWordInput->minCorpusCount != null) {
		 	$queryParams["minCorpusCount"] = $this->apiClient->toPathValue($wordsRandomWordInput->minCorpusCount);
		}
		if($wordsRandomWordInput != null && $wordsRandomWordInput->maxCorpusCount != null) {
		 	$queryParams["maxCorpusCount"] = $this->apiClient->toPathValue($wordsRandomWordInput->maxCorpusCount);
		}
		if($wordsRandomWordInput != null && $wordsRandomWordInput->minDictionaryCount != null) {
		 	$queryParams["minDictionaryCount"] = $this->apiClient->toPathValue($wordsRandomWordInput->minDictionaryCount);
		}
		if($wordsRandomWordInput != null && $wordsRandomWordInput->maxDictionaryCount != null) {
		 	$queryParams["maxDictionaryCount"] = $this->apiClient->toPathValue($wordsRandomWordInput->maxDictionaryCount);
		}
		if($wordsRandomWordInput != null && $wordsRandomWordInput->minLength != null) {
		 	$queryParams["minLength"] = $this->apiClient->toPathValue($wordsRandomWordInput->minLength);
		}
		if($wordsRandomWordInput != null && $wordsRandomWordInput->maxLength != null) {
		 	$queryParams["maxLength"] = $this->apiClient->toPathValue($wordsRandomWordInput->maxLength);
		}

	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'WordObject');
		return $responseObject;
				
				
	 }



}