<?php
/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */

class AccountAPI {

	function __construct($apiClient) {
	  $this->apiClient = $apiClient;
	}


	/**
	 * Authenticates a User
	 *
	 * 
	 * 
   * @param username  A confirmed Wordnik username
   *  @param password  The user's password
   *  
	 * @return AuthenticationToken {@link AuthenticationToken} 
	 * @throws APIException 403 - Account not available. 404 - User not found. 
	 */

	 public function authenticate($username, $password) {

		//parse inputs
		$resourcePath = "/account.{format}/authenticate/{username}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
    if($password != null) {
		$queryParams['password'] = $this->apiClient->toPathValue($password);
	}

		if($username != null) {
			$resourcePath = str_replace("{username}", $username, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'AuthenticationToken');
		return $responseObject;
				
				
	 }


	/**
	 * Authenticates a user
	 *
	 * 
	 * 
   * @param username  A confirmed Wordnik username
   *  @param postData  The user's password
   *  
	 * @return AuthenticationToken {@link AuthenticationToken} 
	 * @throws APIException 403 - Account not available. 404 - User not found. 
	 */

	 public function authenticatePost($username, $postData) {

		//parse inputs
		$resourcePath = "/account.{format}/authenticate/{username}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
		
		if($username != null) {
			$resourcePath = str_replace("{username}", $username, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'AuthenticationToken');
		return $responseObject;
				
				
	 }


	/**
	 * Fetches WordList objects for the logged-in user.
	 *
	 * 
	 * 
   * @param api_key  
   *  @param auth_token  auth_token of logged-in user
   *  @param skip  Results to skip
   *  @param limit  Maximum number of results to return
   *  
	 * @return Array<WordList> {@link WordList} 
	 * @throws APIException 403 - Not authenticated. 404 - User account not found. 
	 */

	 public function getWordListsForCurrentUser($api_key, $auth_token, $skip, $limit) {

		//parse inputs
		$resourcePath = "/account.{format}/wordLists";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
    if($skip != null) {
		$queryParams['skip'] = $this->apiClient->toPathValue($skip);
	}
    if($limit != null) {
		$queryParams['limit'] = $this->apiClient->toPathValue($limit);
	}

		if($api_key != null) {
		 	$headerParams['api_key'] = $this->apiClient->toPathValue($api_key);
		}
		if($auth_token != null) {
		 	$headerParams['auth_token'] = $this->apiClient->toPathValue($auth_token);
		}
	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		
        $responseObjects = array();
        foreach ($response as $object) {
          $responseObjects[] = $this->apiClient->deserialize($object, 'WordList');
        }
        return $responseObjects;				
	 }


	/**
	 * Returns usage statistics for the API account.
	 *
	 * 
	 * 
   * @param api_key  
   *  
	 * @return ApiTokenStatus {@link ApiTokenStatus} 
	 * @throws APIException 400 - No token supplied. 404 - No API account with supplied token. 
	 */

	 public function getApiTokenStatus($api_key) {

		//parse inputs
		$resourcePath = "/account.{format}/apiTokenStatus";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($api_key != null) {
		 	$headerParams['api_key'] = $this->apiClient->toPathValue($api_key);
		}
	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'ApiTokenStatus');
		return $responseObject;
				
				
	 }


	/**
	 * Returns the logged-in User
	 *
	 * Requires a valid auth_token to be set.
	 * 
   * @param api_key  
   *  @param auth_token  The auth token of the logged-in user, obtained by calling /account.{format}/authenticate/{username} (described above)
   *  
	 * @return User {@link User} 
	 * @throws APIException 403 - Not logged in. 404 - User not found. 
	 */

	 public function getLoggedInUser($api_key, $auth_token) {

		//parse inputs
		$resourcePath = "/account.{format}/user";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($api_key != null) {
		 	$headerParams['api_key'] = $this->apiClient->toPathValue($api_key);
		}
		if($auth_token != null) {
		 	$headerParams['auth_token'] = $this->apiClient->toPathValue($auth_token);
		}
	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'User');
		return $responseObject;
				
				
	 }



}